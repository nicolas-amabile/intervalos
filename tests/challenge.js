const {
  NOTES,
  SHIFTS,
  INTERVALS,
  AUGMENTED_DIMINISHED,
  INTERVAL_QUALITY,
  FULL_INTERVAL_QUALITY,
  DIRECTION,
  OCTAVE,
  getQualityOptionsForInterval,
} = require('../src/constants')

const { ASC, DSC } = DIRECTION
const { FLAT, NATURAL, SHARP } = SHIFTS
const { m, M, DISMINUIDA, JUSTA, AUMENTADA } = FULL_INTERVAL_QUALITY
const { II, III, IV, V, VI, VII } = INTERVALS

// function calculateTargetNote(startNote, shift, interval, intervalQuality, direction)

const ASC_TEST_CASES = [
  ['A', FLAT, II, m, ASC, '<EXPECTED>'],
  ['A', FLAT, II, m, ASC, '<EXPECTED>'],
  ['A', FLAT, III, m, ASC, '<EXPECTED>'],
  ['A', FLAT, III, m, ASC, '<EXPECTED>'],
  ['A', FLAT, IV, DISMINUIDA, ASC, '<EXPECTED>'],
  ['A', FLAT, IV, JUSTA, ASC, '<EXPECTED>'],
  ['A', FLAT, IV, AUMENTADA, ASC, '<EXPECTED>'],
  ['A', FLAT, V, DISMINUIDA, ASC, '<EXPECTED>'],
  ['A', FLAT, V, JUSTA, ASC, '<EXPECTED>'],
  ['A', FLAT, V, AUMENTADA, ASC, '<EXPECTED>'],
  ['A', FLAT, VI, m, ASC, '<EXPECTED>'],
  ['A', FLAT, VI, m, ASC, '<EXPECTED>'],
  ['A', FLAT, VII, m, ASC, '<EXPECTED>'],
  ['A', FLAT, VII, m, ASC, '<EXPECTED>'],
  ['A', NATURAL, II, m, ASC, '<EXPECTED>'],
  ['A', NATURAL, II, m, ASC, '<EXPECTED>'],
  ['A', NATURAL, III, m, ASC, '<EXPECTED>'],
  ['A', NATURAL, III, m, ASC, '<EXPECTED>'],
  ['A', NATURAL, IV, DISMINUIDA, ASC, '<EXPECTED>'],
  ['A', NATURAL, IV, JUSTA, ASC, '<EXPECTED>'],
  ['A', NATURAL, IV, AUMENTADA, ASC, '<EXPECTED>'],
  ['A', NATURAL, V, DISMINUIDA, ASC, '<EXPECTED>'],
  ['A', NATURAL, V, JUSTA, ASC, '<EXPECTED>'],
  ['A', NATURAL, V, AUMENTADA, ASC, '<EXPECTED>'],
  ['A', NATURAL, VI, m, ASC, '<EXPECTED>'],
  ['A', NATURAL, VI, m, ASC, '<EXPECTED>'],
  ['A', NATURAL, VII, m, ASC, '<EXPECTED>'],
  ['A', NATURAL, VII, m, ASC, '<EXPECTED>'],
  ['A', SHARP, II, m, ASC, '<EXPECTED>'],
  ['A', SHARP, II, m, ASC, '<EXPECTED>'],
  ['A', SHARP, III, m, ASC, '<EXPECTED>'],
  ['A', SHARP, III, m, ASC, '<EXPECTED>'],
  ['A', SHARP, IV, DISMINUIDA, ASC, '<EXPECTED>'],
  ['A', SHARP, IV, JUSTA, ASC, '<EXPECTED>'],
  ['A', SHARP, IV, AUMENTADA, ASC, '<EXPECTED>'],
  ['A', SHARP, V, DISMINUIDA, ASC, '<EXPECTED>'],
  ['A', SHARP, V, JUSTA, ASC, '<EXPECTED>'],
  ['A', SHARP, V, AUMENTADA, ASC, '<EXPECTED>'],
  ['A', SHARP, VI, m, ASC, '<EXPECTED>'],
  ['A', SHARP, VI, m, ASC, '<EXPECTED>'],
  ['A', SHARP, VII, m, ASC, '<EXPECTED>'],
  ['A', SHARP, VII, m, ASC, '<EXPECTED>'],
]

const DSC_TEST_CASES = [
  ['A', FLAT, II, m, DSC, '<EXPECTED>'],
  ['A', FLAT, II, m, DSC, '<EXPECTED>'],
  ['A', FLAT, III, m, DSC, '<EXPECTED>'],
  ['A', FLAT, III, m, DSC, '<EXPECTED>'],
  ['A', FLAT, IV, DISMINUIDA, DSC, '<EXPECTED>'],
  ['A', FLAT, IV, JUSTA, DSC, '<EXPECTED>'],
  ['A', FLAT, IV, AUMENTADA, DSC, '<EXPECTED>'],
  ['A', FLAT, V, DISMINUIDA, DSC, '<EXPECTED>'],
  ['A', FLAT, V, JUSTA, DSC, '<EXPECTED>'],
  ['A', FLAT, V, AUMENTADA, DSC, '<EXPECTED>'],
  ['A', FLAT, VI, m, DSC, '<EXPECTED>'],
  ['A', FLAT, VI, m, DSC, '<EXPECTED>'],
  ['A', FLAT, VII, m, DSC, '<EXPECTED>'],
  ['A', FLAT, VII, m, DSC, '<EXPECTED>'],
  ['A', NATURAL, II, m, DSC, '<EXPECTED>'],
  ['A', NATURAL, II, m, DSC, '<EXPECTED>'],
  ['A', NATURAL, III, m, DSC, '<EXPECTED>'],
  ['A', NATURAL, III, m, DSC, '<EXPECTED>'],
  ['A', NATURAL, IV, DISMINUIDA, DSC, '<EXPECTED>'],
  ['A', NATURAL, IV, JUSTA, DSC, '<EXPECTED>'],
  ['A', NATURAL, IV, AUMENTADA, DSC, '<EXPECTED>'],
  ['A', NATURAL, V, DISMINUIDA, DSC, '<EXPECTED>'],
  ['A', NATURAL, V, JUSTA, DSC, '<EXPECTED>'],
  ['A', NATURAL, V, AUMENTADA, DSC, '<EXPECTED>'],
  ['A', NATURAL, VI, m, DSC, '<EXPECTED>'],
  ['A', NATURAL, VI, m, DSC, '<EXPECTED>'],
  ['A', NATURAL, VII, m, DSC, '<EXPECTED>'],
  ['A', NATURAL, VII, m, DSC, '<EXPECTED>'],
  ['A', SHARP, II, m, DSC, '<EXPECTED>'],
  ['A', SHARP, II, m, DSC, '<EXPECTED>'],
  ['A', SHARP, III, m, DSC, '<EXPECTED>'],
  ['A', SHARP, III, m, DSC, '<EXPECTED>'],
  ['A', SHARP, IV, DISMINUIDA, DSC, '<EXPECTED>'],
  ['A', SHARP, IV, JUSTA, DSC, '<EXPECTED>'],
  ['A', SHARP, IV, AUMENTADA, DSC, '<EXPECTED>'],
  ['A', SHARP, V, DISMINUIDA, DSC, '<EXPECTED>'],
  ['A', SHARP, V, JUSTA, DSC, '<EXPECTED>'],
  ['A', SHARP, V, AUMENTADA, DSC, '<EXPECTED>'],
  ['A', SHARP, VI, m, DSC, '<EXPECTED>'],
  ['A', SHARP, VI, m, DSC, '<EXPECTED>'],
  ['A', SHARP, VII, m, DSC, '<EXPECTED>'],
  ['A', SHARP, VII, m, DSC, '<EXPECTED>'],
  ['G', FLAT, II, m, ASC, '<EXPECTED>'],
  ['G', FLAT, II, m, ASC, '<EXPECTED>'],
  ['G', FLAT, III, m, ASC, '<EXPECTED>'],
  ['G', FLAT, III, m, ASC, '<EXPECTED>'],
  ['G', FLAT, IV, DISMINUIDA, ASC, '<EXPECTED>'],
  ['G', FLAT, IV, JUSTA, ASC, '<EXPECTED>'],
  ['G', FLAT, IV, AUMENTADA, ASC, '<EXPECTED>'],
  ['G', FLAT, V, DISMINUIDA, ASC, '<EXPECTED>'],
  ['G', FLAT, V, JUSTA, ASC, '<EXPECTED>'],
  ['G', FLAT, V, AUMENTADA, ASC, '<EXPECTED>'],
  ['G', FLAT, VI, m, ASC, '<EXPECTED>'],
  ['G', FLAT, VI, m, ASC, '<EXPECTED>'],
  ['G', FLAT, VII, m, ASC, '<EXPECTED>'],
  ['G', FLAT, VII, m, ASC, '<EXPECTED>'],
  ['G', NATURAL, II, m, ASC, '<EXPECTED>'],
  ['G', NATURAL, II, m, ASC, '<EXPECTED>'],
  ['G', NATURAL, III, m, ASC, '<EXPECTED>'],
  ['G', NATURAL, III, m, ASC, '<EXPECTED>'],
  ['G', NATURAL, IV, DISMINUIDA, ASC, '<EXPECTED>'],
  ['G', NATURAL, IV, JUSTA, ASC, '<EXPECTED>'],
  ['G', NATURAL, IV, AUMENTADA, ASC, '<EXPECTED>'],
  ['G', NATURAL, V, DISMINUIDA, ASC, '<EXPECTED>'],
  ['G', NATURAL, V, JUSTA, ASC, '<EXPECTED>'],
  ['G', NATURAL, V, AUMENTADA, ASC, '<EXPECTED>'],
  ['G', NATURAL, VI, m, ASC, '<EXPECTED>'],
  ['G', NATURAL, VI, m, ASC, '<EXPECTED>'],
  ['G', NATURAL, VII, m, ASC, '<EXPECTED>'],
  ['G', NATURAL, VII, m, ASC, '<EXPECTED>'],
  ['G', SHARP, II, m, ASC, '<EXPECTED>'],
  ['G', SHARP, II, m, ASC, '<EXPECTED>'],
  ['G', SHARP, III, m, ASC, '<EXPECTED>'],
  ['G', SHARP, III, m, ASC, '<EXPECTED>'],
  ['G', SHARP, IV, DISMINUIDA, ASC, '<EXPECTED>'],
  ['G', SHARP, IV, JUSTA, ASC, '<EXPECTED>'],
  ['G', SHARP, IV, AUMENTADA, ASC, '<EXPECTED>'],
  ['G', SHARP, V, DISMINUIDA, ASC, '<EXPECTED>'],
  ['G', SHARP, V, JUSTA, ASC, '<EXPECTED>'],
  ['G', SHARP, V, AUMENTADA, ASC, '<EXPECTED>'],
  ['G', SHARP, VI, m, ASC, '<EXPECTED>'],
  ['G', SHARP, VI, m, ASC, '<EXPECTED>'],
  ['G', SHARP, VII, m, ASC, '<EXPECTED>'],
  ['G', SHARP, VII, m, ASC, '<EXPECTED>'],
  ['G', FLAT, II, m, DSC, '<EXPECTED>'],
  ['G', FLAT, II, m, DSC, '<EXPECTED>'],
  ['G', FLAT, III, m, DSC, '<EXPECTED>'],
  ['G', FLAT, III, m, DSC, '<EXPECTED>'],
  ['G', FLAT, IV, DISMINUIDA, DSC, '<EXPECTED>'],
  ['G', FLAT, IV, JUSTA, DSC, '<EXPECTED>'],
  ['G', FLAT, IV, AUMENTADA, DSC, '<EXPECTED>'],
  ['G', FLAT, V, DISMINUIDA, DSC, '<EXPECTED>'],
  ['G', FLAT, V, JUSTA, DSC, '<EXPECTED>'],
  ['G', FLAT, V, AUMENTADA, DSC, '<EXPECTED>'],
  ['G', FLAT, VI, m, DSC, '<EXPECTED>'],
  ['G', FLAT, VI, m, DSC, '<EXPECTED>'],
  ['G', FLAT, VII, m, DSC, '<EXPECTED>'],
  ['G', FLAT, VII, m, DSC, '<EXPECTED>'],
  ['G', NATURAL, II, m, DSC, '<EXPECTED>'],
  ['G', NATURAL, II, m, DSC, '<EXPECTED>'],
  ['G', NATURAL, III, m, DSC, '<EXPECTED>'],
  ['G', NATURAL, III, m, DSC, '<EXPECTED>'],
  ['G', NATURAL, IV, DISMINUIDA, DSC, '<EXPECTED>'],
  ['G', NATURAL, IV, JUSTA, DSC, '<EXPECTED>'],
  ['G', NATURAL, IV, AUMENTADA, DSC, '<EXPECTED>'],
  ['G', NATURAL, V, DISMINUIDA, DSC, '<EXPECTED>'],
  ['G', NATURAL, V, JUSTA, DSC, '<EXPECTED>'],
  ['G', NATURAL, V, AUMENTADA, DSC, '<EXPECTED>'],
  ['G', NATURAL, VI, m, DSC, '<EXPECTED>'],
  ['G', NATURAL, VI, m, DSC, '<EXPECTED>'],
  ['G', NATURAL, VII, m, DSC, '<EXPECTED>'],
  ['G', NATURAL, VII, m, DSC, '<EXPECTED>'],
  ['G', SHARP, II, m, DSC, '<EXPECTED>'],
  ['G', SHARP, II, m, DSC, '<EXPECTED>'],
  ['G', SHARP, III, m, DSC, '<EXPECTED>'],
  ['G', SHARP, III, m, DSC, '<EXPECTED>'],
  ['G', SHARP, IV, DISMINUIDA, DSC, '<EXPECTED>'],
  ['G', SHARP, IV, JUSTA, DSC, '<EXPECTED>'],
  ['G', SHARP, IV, AUMENTADA, DSC, '<EXPECTED>'],
  ['G', SHARP, V, DISMINUIDA, DSC, '<EXPECTED>'],
  ['G', SHARP, V, JUSTA, DSC, '<EXPECTED>'],
  ['G', SHARP, V, AUMENTADA, DSC, '<EXPECTED>'],
  ['G', SHARP, VI, m, DSC, '<EXPECTED>'],
  ['G', SHARP, VI, m, DSC, '<EXPECTED>'],
  ['G', SHARP, VII, m, DSC, '<EXPECTED>'],
  ['G', SHARP, VII, m, DSC, '<EXPECTED>'],
]

const CHALLENGE_CASES = [...ASC_TEST_CASES, ...DSC_TEST_CASES]

const generateTestCases = (notes) =>
  notes.reduce((acc, note) => {
    Object.values(DIRECTION).forEach((direction) => {
      Object.values(SHIFTS).forEach((shift) => {
        Object.values(INTERVALS).forEach((interval) => {
          const intervalOptions = getQualityOptionsForInterval(interval)
          Object.values(intervalOptions).forEach((intervalQuality) => {
            acc.push([note, shift, interval, intervalQuality, direction, '<EXPECTED>'])
          })
        })
      })
    })
    return acc
  }, [])

const logTestCases = () => {
  console.log('===================== TEST CASES =======================')
  console.log(generateTestCases(['A', 'G']))
  console.log('========================================================')
}

module.exports = {
  CHALLENGE_CASES,
  logTestCases,
}
